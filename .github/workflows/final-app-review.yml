name: final-app-review
on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  # Override if your app uses different ports
  BACKEND_URL: http://localhost:8000
  FRONTEND_URL: http://localhost:3000

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install root or workspace deps (best effort)
        run: |
          npm ci || npm i || true

      - name: Install backend deps
        if: ${{ hashFiles('backend/package.json') != '' }}
        working-directory: backend
        run: npm ci || npm i

      - name: Prepare backend .env (optional APS/ACC)
        if: ${{ hashFiles('backend/.env.example') != '' }}
        shell: bash
        working-directory: backend
        run: |
          cp -f .env.example .env || true
          # Only write keys if provided as repo/environment secrets
          [[ -n "${{ secrets.APS_CLIENT_ID }}" ]] && sed -i 's#APS_CLIENT_ID=.*#APS_CLIENT_ID=${{ secrets.APS_CLIENT_ID }}#' .env
          [[ -n "${{ secrets.APS_CLIENT_SECRET }}" ]] && sed -i 's#APS_CLIENT_SECRET=.*#APS_CLIENT_SECRET=${{ secrets.APS_CLIENT_SECRET }}#' .env
          [[ -n "${{ secrets.ACC_ACCOUNT_ID }}" ]] && sed -i 's#ACC_ACCOUNT_ID=.*#ACC_ACCOUNT_ID=${{ secrets.ACC_ACCOUNT_ID }}#' .env
          [[ -n "${{ secrets.ACC_PROJECT_ID }}" ]] && sed -i 's#ACC_PROJECT_ID=.*#ACC_PROJECT_ID=${{ secrets.ACC_PROJECT_ID }}#' .env

      - name: Start backend
        if: ${{ hashFiles('backend/package.json') != '' }}
        working-directory: backend
        run: |
          (npm run dev > ../backend.log 2>&1 &)
          echo "Backend launching…"

      - name: Install frontend deps
        if: ${{ hashFiles('frontend/package.json') != '' }}
        working-directory: frontend
        run: npm ci || npm i

      - name: Start frontend (preview if available, else dev)
        if: ${{ hashFiles('frontend/package.json') != '' }}
        working-directory: frontend
        shell: bash
        run: |
          if npm run | grep -qE '^  preview'; then
            (npm run preview > ../frontend.log 2>&1 &)
          else
            (npm run dev > ../frontend.log 2>&1 &)
          fi
          echo "Frontend launching…"

      - name: Install wait-on & Playwright browsers
        run: |
          npm i -D wait-on
          npx -y playwright install --with-deps || true

      - name: Wait for services
        run: |
          npx wait-on $BACKEND_URL/api/health --timeout 180000 || true
          npx wait-on $FRONTEND_URL --timeout 180000

      - name: Create sample docs
        run: |
          mkdir -p samples
          echo '{ "blueprint":"Sample House A", "urn":"urn:sample:demo", "sheets":["planA.pdf"], "meta":{"sqft":1200,"floors":2} }' > samples/sample_blueprint.json
          echo '[{"package":"Walls","type":"Drywall","qty":200,"unit":"sf"},{"package":"Framing","type":"2x4 Lumber","qty":500,"unit":"lf"}]' > samples/sample_takeoff.json

      - name: Exercise APIs (translate → sync → items → estimate)
        shell: bash
        run: |
          set -e
          if curl -sSf "$BACKEND_URL/api/health" > /dev/null; then
            curl -sS -X POST "$BACKEND_URL/api/models/translate" \
              -H "Content-Type: application/json" \
              --data-binary @samples/sample_blueprint.json \
              -o translate.json || true

            curl -sS -X POST "$BACKEND_URL/api/takeoff/sync" -o sync.json || true
            curl -sS "$BACKEND_URL/api/takeoff/items" -o items.json || true

            # If your bootstrap exposes /api/estimate/lines, capture it (ignore failure if route not present)
            curl -sS "$BACKEND_URL/api/estimate/lines" -o estimate.json || echo '{}' > estimate.json
          else
            echo "Backend not reachable; skipping API calls."
            echo '{}' > translate.json; echo '{}' > sync.json; echo '{"data":[]}' > items.json; echo '{}' > estimate.json
          fi

      - name: Run Playwright E2E
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.FRONTEND_URL }}
        run: |
          # Try common project locations for tests; fallback to repo root
          if [ -f frontend/package.json ]; then (cd frontend && (npm run test:e2e || npx playwright test)) || exit 1; \
          elif [ -d tests/e2e ]; then npx playwright test; \
          else echo "No Playwright tests found; skipping." ; fi

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report
            frontend/playwright-report
          if-no-files-found: ignore

      - name: Upload logs & API responses
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: final-app-review-artifacts
          path: |
            backend.log
            frontend.log
            translate.json
            sync.json
            items.json
            estimate.json
          if-no-files-found: ignore

      # === CodeQL (JS/TS) inline (official composite) ===
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: Autobuild (CodeQL)
        uses: github/codeql-action/autobuild@v3

      - name: Analyze (CodeQL)
        uses: github/codeql-action/analyze@v3

      # === Optional: Bandit (only if Python present) ===
      - name: Run Bandit (Python SAST) if *.py exists
        if: ${{ hashFiles('**/*.py') != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Bandit scan
        if: ${{ hashFiles('**/*.py') != '' }}
        run: |
          pip install bandit
          bandit -r . -f sarif -o bandit.sarif || true
      - name: Upload Bandit SARIF
        if: ${{ hashFiles('**/*.py') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
